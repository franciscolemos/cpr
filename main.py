from propagation import *
import numpy as np
from itertools import product

intervals = [
    [[[-1, -1], [1115, 1260], [1715, 1860], [1775, 1920], [1835, 1980], [1895, 2040], [1955, 2100], [2015, 2160]], [[-2, -2], [1740, 1915], [1800, 1975], [1860, 2035], [1920, 2095], [1980, 2155], [2040, 2215], [2100, 2275], [2160, 2335], [2220, 2395], [2340, 2515], [2400, 2575], [2580, 2755]], [[-3, -3], [2155, 2310], [2215, 2370], [2275, 2430], [2335, 2490], [2395, 2550], [2455, 2610], [2515, 2670], [2575, 2730]], [[-4, -4], [2320, 2495], [2380, 2555], [2560, 2735]], [[-5, -5], [2550, 2690]]]
,   [[[-1, -1], [1800, 1925], [1920, 2045]], [[-2, -2], [1795, 1935], [2155, 2295], [2335, 2475], [2395, 2535], [2455, 2595], [2515, 2655]], [[-3, -3], [1935, 2080], [2235, 2380], [2295, 2440], [2355, 2500], [2475, 2620]], [[-4, -4], [2125, 2275], [2305, 2455], [2365, 2515], [2425, 2575], [2545, 2695]], [[-5, -5], [2275, 2410], [2515, 2650]], [[-6, -6], [2410, 2535], [2470, 2595]], [[-7, -7], [2555, 2685]]]
,   [[[-1, -1], [1105, 1270], [1765, 1930], [1825, 1990], [1945, 2110], [2005, 2170]], [[-2, -2], [1820, 1930], [1940, 2050], [2180, 2290], [2240, 2350], [2300, 2410], [2540, 2650]], [[-3, -3], [2000, 2110], [2060, 2170], [2120, 2230], [2360, 2470]], [[-4, -4], [2125, 2240], [2305, 2420], [2425, 2540], [2545, 2660]], [[-5, -5], [2325, 2440], [2385, 2500], [2565, 2680]], [[-6, -6], [2480, 2600], [2540, 2660]], [[-7, -7], [2615, 2725]]]
,   [[[-1, -1], [1010, 1120], [1850, 1960], [1970, 2080]], [[-2, -2], [1120, 1225], [2020, 2125], [2080, 2185]], [[-3, -3], [1765, 1900], [1825, 1960], [2005, 2140], [2065, 2200], [2125, 2260], [2185, 2320], [2305, 2440], [2365, 2500], [2425, 2560]], [[-4, -4], [1935, 2085], [2235, 2385], [2295, 2445]], [[-5, -5], [2100, 2215], [2160, 2275]], [[-6, -6], [2215, 2320], [2275, 2380], [2455, 2560]], [[-7, -7], [2325, 2430]], [[-8, -8], [2435, 2540]]]
]

if __name__ == '__main__':
    for interval in intervals:
        cartesian_product = product(*interval) 
        search_space1 = np.array(list(cartesian_product))        
        print("Initial number of solutions: ", len(search_space1))
        search_space2 = reduce_overlaps(interval)